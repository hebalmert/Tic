// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tic.Web.Data;

#nullable disable

namespace Tic.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240414225810_PlaCatServ")]
    partial class PlaCatServ
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tic.Shared.Entites.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Corporate", b =>
                {
                    b.Property<int>("CorporateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorporateId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ImageId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("SoftPlanId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("ToStar")
                        .HasColumnType("date");

                    b.HasKey("CorporateId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SoftPlanId");

                    b.HasIndex("StateId");

                    b.ToTable("Corporates");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CodPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Photo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Tic.Shared.Entites.SoftPlan", b =>
                {
                    b.Property<int>("SoftPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftPlanId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMikrotik")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TimeMonth")
                        .HasColumnType("int");

                    b.HasKey("SoftPlanId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SoftPlans");
                });

            modelBuilder.Entity("Tic.Shared.Entites.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketInactive", b =>
                {
                    b.Property<int>("TicketInactiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketInactiveId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tiempo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("TicketInactiveId");

                    b.HasIndex("Tiempo")
                        .IsUnique();

                    b.ToTable("TicketInactives");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketRefresh", b =>
                {
                    b.Property<int>("TicketRefreshId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketRefreshId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tiempo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("TicketRefreshId");

                    b.HasIndex("Tiempo")
                        .IsUnique();

                    b.ToTable("TicketRefreshes");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketTime", b =>
                {
                    b.Property<int>("TicketTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTimeId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("ScriptConsumo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScriptContinuo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiempo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("TicketTimeId");

                    b.HasIndex("Tiempo")
                        .IsUnique();

                    b.ToTable("TicketTimes");
                });

            modelBuilder.Entity("Tic.Shared.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorporateId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.ChainCode", b =>
                {
                    b.Property<int>("ChainCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChainCodeId"));

                    b.Property<string>("Cadena")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int>("Largo")
                        .HasColumnType("int");

                    b.HasKey("ChainCodeId");

                    b.HasIndex("CorporateId");

                    b.ToTable("ChainCodes");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("DocumentName", "CorporateId")
                        .IsUnique();

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.IpNetwork", b =>
                {
                    b.Property<int>("IpNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IpNetworkId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Assigned")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IpNetworkId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("Ip", "CorporateId")
                        .IsUnique();

                    b.ToTable("IpNetworks");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("MarkName", "CorporateId")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.MarkModel", b =>
                {
                    b.Property<int>("MarkModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkModelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int>("MarkId")
                        .HasColumnType("int");

                    b.Property<string>("MarkModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkModelId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("MarkId");

                    b.HasIndex("MarkModelName", "CorporateId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkModels");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEdit")
                        .HasColumnType("date");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PlanCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("SpeedDown")
                        .HasColumnType("int");

                    b.Property<int>("SpeedDownType")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUp")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUpType")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TasaReuso")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.Property<int>("TicketInactiveId")
                        .HasColumnType("int");

                    b.Property<int>("TicketRefreshId")
                        .HasColumnType("int");

                    b.Property<int>("TicketTimeId")
                        .HasColumnType("int");

                    b.HasKey("PlanId");

                    b.HasIndex("PlanCategoryId");

                    b.HasIndex("ServerId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TicketInactiveId");

                    b.HasIndex("TicketRefreshId");

                    b.HasIndex("TicketTimeId");

                    b.HasIndex("CorporateId", "PlanName", "ServerId")
                        .IsUnique();

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.PlanCategory", b =>
                {
                    b.Property<int>("PlanCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanCategoryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<string>("PlanCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanCategoryId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("PlanCategoryName", "CorporateId")
                        .IsUnique();

                    b.ToTable("PlanCategories");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Register", b =>
                {
                    b.Property<int>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegisterId"));

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTickets")
                        .HasColumnType("int");

                    b.Property<int>("PayPorcentCacheir")
                        .HasColumnType("int");

                    b.Property<int>("PorcentCacheir")
                        .HasColumnType("int");

                    b.Property<int>("SellCachier")
                        .HasColumnType("int");

                    b.Property<int>("Sells")
                        .HasColumnType("int");

                    b.Property<int>("Tickets")
                        .HasColumnType("int");

                    b.HasKey("RegisterId");

                    b.HasIndex("CorporateId");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ApiPort")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int>("IpNetworkId")
                        .HasColumnType("int");

                    b.Property<int>("MarkId")
                        .HasColumnType("int");

                    b.Property<int>("MarkModelId")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("WanName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("ServerId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("IpNetworkId");

                    b.HasIndex("MarkId");

                    b.HasIndex("MarkModelId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("ServerName", "CorporateId")
                        .IsUnique();

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaxId");

                    b.HasIndex("CorporateId", "Rate")
                        .IsUnique();

                    b.HasIndex("CorporateId", "TaxName")
                        .IsUnique();

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporateId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZoneId");

                    b.HasIndex("CityId");

                    b.HasIndex("CorporateId");

                    b.HasIndex("StateId", "CityId", "ZoneName", "CorporateId")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tic.Shared.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tic.Shared.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tic.Shared.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tic.Shared.Entites.City", b =>
                {
                    b.HasOne("Tic.Shared.Entites.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Corporate", b =>
                {
                    b.HasOne("Tic.Shared.Entites.City", "City")
                        .WithMany("Corporates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.Country", "Country")
                        .WithMany("Corporates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.SoftPlan", "SoftPlan")
                        .WithMany("Corporates")
                        .HasForeignKey("SoftPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.State", "State")
                        .WithMany("Corporates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("SoftPlan");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Manager", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany("Managers")
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.Entites.State", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Tic.Shared.Entites.User", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId");

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.ChainCode", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.DocumentType", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.IpNetwork", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Mark", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.MarkModel", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.Mark", "Mark")
                        .WithMany("MarkModels")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Plan", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.PlanCategory", "PlanCategory")
                        .WithMany("Plans")
                        .HasForeignKey("PlanCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.Server", "Server")
                        .WithMany("Plans")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.Tax", "Tax")
                        .WithMany("Plans")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.TicketInactive", "TicketInactive")
                        .WithMany("Plans")
                        .HasForeignKey("TicketInactiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.TicketRefresh", "TicketRefresh")
                        .WithMany("Plans")
                        .HasForeignKey("TicketRefreshId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.TicketTime", "TicketTime")
                        .WithMany("Plans")
                        .HasForeignKey("TicketTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("PlanCategory");

                    b.Navigation("Server");

                    b.Navigation("Tax");

                    b.Navigation("TicketInactive");

                    b.Navigation("TicketRefresh");

                    b.Navigation("TicketTime");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.PlanCategory", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Register", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Server", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.IpNetwork", "IpNetwork")
                        .WithMany("Servers")
                        .HasForeignKey("IpNetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.Mark", "Mark")
                        .WithMany("Servers")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.MarkModel", "MarkModel")
                        .WithMany("Servers")
                        .HasForeignKey("MarkModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.EntitiesSoft.Zone", "Zone")
                        .WithMany("Servers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("IpNetwork");

                    b.Navigation("Mark");

                    b.Navigation("MarkModel");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Tax", b =>
                {
                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Zone", b =>
                {
                    b.HasOne("Tic.Shared.Entites.City", "City")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tic.Shared.Entites.State", "State")
                        .WithMany("Zones")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Corporate");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tic.Shared.Entites.City", b =>
                {
                    b.Navigation("Corporates");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Corporate", b =>
                {
                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Tic.Shared.Entites.Country", b =>
                {
                    b.Navigation("Corporates");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Tic.Shared.Entites.SoftPlan", b =>
                {
                    b.Navigation("Corporates");
                });

            modelBuilder.Entity("Tic.Shared.Entites.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Corporates");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketInactive", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketRefresh", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.Entites.TicketTime", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.IpNetwork", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Mark", b =>
                {
                    b.Navigation("MarkModels");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.MarkModel", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.PlanCategory", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Server", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Tax", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Tic.Shared.EntitiesSoft.Zone", b =>
                {
                    b.Navigation("Servers");
                });
#pragma warning restore 612, 618
        }
    }
}
